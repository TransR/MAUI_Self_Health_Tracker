@using System.ComponentModel.DataAnnotations

<EditForm Model="@Model" OnValidSubmit="@OnSubmit">
  <DataAnnotationsValidator />
  <div class="row g-2">
    <div class="col-md-3">
      <label class="form-label">When</label>
      <InputDate @bind-Value="Model.When" class="form-control" />
    </div>
    <div class="col-md-3">
      <label class="form-label">Analyte</label>
      <InputText @bind-Value="Model.Analyte" class="form-control" />
      <ValidationMessage For="() => Model.Analyte" />
    </div>
    <div class="col-md-2">
      <label class="form-label">Value</label>
      <InputNumber @bind-Value="Model.Value" class="form-control" />
      <ValidationMessage For="() => Model.Value" />
    </div>
    <div class="col-md-2">
      <label class="form-label">Unit</label>
      <InputText @bind-Value="Model.Unit" class="form-control" />
      <ValidationMessage For="() => Model.Unit" />
    </div>
    <div class="col-md-2">
      <label class="form-label">Ref Range</label>
      <InputText @bind-Value="Model.ReferenceRange" class="form-control" />
    </div>
  </div>
  <div class="row g-2 mt-1">
    <div class="col-md-12">
      <label class="form-label">Note</label>
      <InputText @bind-Value="Model.Note" class="form-control" />
    </div>
  </div>
  <div class="mt-3">
    <button type="submit" class="btn btn-primary">Add</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="Reset">Reset</button>
  </div>
</EditForm>

@code {
  public sealed class LabFormModel
  {
      [Required]
      public DateTime When { get; set; } = DateTime.Now;
      [Required, StringLength(80)]
      public string Analyte { get; set; } = string.Empty;
      [Range(typeof(decimal), "0.0001", "1000000")]
      public decimal Value { get; set; }
      [Required, StringLength(40)]
      public string Unit { get; set; } = string.Empty;
      public string? ReferenceRange { get; set; }
      public string? Note { get; set; }
  }

  [Parameter] public EventCallback<LabFormModel> Submit { get; set; }
  private LabFormModel Model { get; set; } = new();

  private async Task OnSubmit() => await Submit.InvokeAsync(Model);
  private void Reset() => Model = new();
}
